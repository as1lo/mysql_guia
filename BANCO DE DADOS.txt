BANCO DE DADOS

SGBD - Sistema de Gerenciamento de Banco de Dados.

Composição:
	- Tabelas: lugar onde os dados são armazenados.

	- Campos (colunas/atributos): mantém informações específicas para os registros.
		Ex.: nome, data de nascimento, preço...

	- Registros (linhas/tuplas): conjunto de campos relacionados que caracterizam os dados de uma única entidade.



STRUCTERED QUERY LANGUAGE (SQL)::------------------------------------

- Linguagem de Consulta Estruturada padrão para acesso de banco de dados.

- Definição e manipulação de dados.

- POde ser embutido em outras linguagens.

- Permite configurações de acesso.

- Permite criação e exclusão de banco de dados e tabelas.



MySQL::------------------------------------

- É um SGBDR.

- Forma padrão da linguagem SQL.


Grupos de Comandos::------------------------------------

DDL: Data Definition Language > Infraestrutura do BD
	CREATE (cria objeto)
	ALTER (modifica objeto)
	DROP (exclui objeto)


DML: Data Manipulation Language 
	INSERT: cria um registro (linha).
	UPDATE: modifica registros.
	DELETE: exclui registros.


DCL: Data Control Language > Controle de Acesso aos Dados
	GRANT: dá acesso.
	REVOKE: retira acesso.


DQL: Data Query Language > Consulta
	SELECT: obtém registros especificos de uma ou mais tabelas.
	


Criar Banco de Dados::------------------------------------

	CREATE DATABASE <nome do banco>;
			db_Biblioteca;




Verificar Bancos de dados Existentes::------------------------------------

	SHOW DATABASES;

		Instruir o SGBDR a utilizar o banco de dados especificado para rodar os comandos:

			USE <nome do banco de dados>;
	
	Visualizar o banco de dados selecionado no momento:

		SELECT DATABASE();




Excluir Banco de Dados::------------------------------------	
	DROP DATABASE <nome do banco>;




Mostrar tabelas Criadas::------------------------------------

	SHOW TABLES;




Restrições (Constraints)::------------------------------------

	- Regras aplicadas nas colunas de uma tabela.
	- Limita os tipos de dados que serão inseridos.
	- Podem ser especificadas depois ou durante a criação da tabela: ALTER e CREATE.

	
	Principais: 
		NOT NULL;
			Impõe a uma coluna a NÃO aceitar valores NULL.



		UNIQUE;
			Impede repetição de dados na coluna.
			Ex.: uma coluna para guardar CPF.




		PRIMARY KEY;
			Valor sempre único: não pode ter valor nulo.
			Cada tabela deve ter apenas uma chave primária.



		FOREIGN KEY;
			Campo que aponta para uma chave primária em outra tabela.
			- Relacionamento entre tabelas.

			Ex.: 
				CONSTRAINT <nome> FOREIGN KEY (<nome da coluna>) REFERENCES <nome da tabela onde está a PK>(<nome da coluna>)
		


		DEFAULT;
			Inserir Valor Padrão será adicionado a todos os novos registros caso nenhum outro valor seja especificado.
		


		AUTO_INCREMENT:
			- Permite que um número único seja gerado quando um novo registro é inserido em uma tabela.
			- Valor inicial padrão é 1, e se incrementa em 1.

			Verificar valor atual do auto incremento:
				SELECT MAX(nome_coluna)
				FROM tabela

			Alterar o próximo valor no campo de Auto-Incremento:
			ALTER TABLE tabela AUTO_INCREMENT = valor;





Criar Tabelas::------------------------------------

	CREATE TABLE [IF NOT EXISTS] nome_tabela (
		coluna tipo_dados constraints
	)




Tipos de Dados::------------------------------------

	- INT: entre 2BI

	- TINYINT: - 128 a 127

	- SMALLINT: -32768 a 32767

	- MEDIUMINT: -8388608 a 8388607

	- BIGINT: 9 quintilhões

	- DECIMAL(M,D): 'M' Dígitos no total (precisão) e D casas decimais (escala); M vai até 65 e D até 30; Padrão: 10,0

	- FLOAT(M,D): Padrão: 10,2; D vai até 24.

	- CHAR(M): String de tamanho fixo entre 0 e 255;

	- BOOL/BOOLEAN: Valores binários 0/1;

	- VARCHAR(M): String de tamanho variável, até 65535 carac.
	- BLOB/MEDIUMBLOB/TINYBLOB: tam. max. 65535 carac. binário; Binary Large Objects; Grandes quantidades de dados, como imagens;

	- MEDIUMTEXT: 16.777.215 carac.

	- LONGTEXT: 4.294.967.295 carac.

	- DATE: 01/01/1000 a 31/12/9999, formato YYYY/MM/DD.

	- DATETIME: DATA + HORA.

	- TIME: Hora: 00:00:00 a 23:59:59; Formato: HH:MM:SS.
	
	- YEAR: formato de 2 ou 4 digitos. 2 (YEAR(2)): 1970 a 2069; 4(YEAR(4)): 1901 a 2155.
	



Alterar Tabelas::------------------------------------

	ALTER TABLE - DROP: excluir colunas
		Ex.:
			ALTER TABLE tabela
			DROP COLUMN coluna;

		Excluir chave primária:
			ALTER TABLE tabela
			DROP PRIMARY KEY;


	ALTER TABLE - ADD: adicionar colunas
		Ex.:
			ALTER TABLE tabela
			ADD coluna tipo_dados constraints;


	ALTER TABLE - ALTER COLUMN: alterar colunas
		Ex.: mudando tipo de dados
			ALTER TABLE tbl_livro
			ALTER COLUMN id_autor SMALLINT;


	ALTER TABLE - ADD PK
		Ex.: 
			ALTER TABLE clientes
			ADD PRIMARY KEY (id_cliente)


	ALTER TABLE - RENAME TO: alterar nome da tabela.
		Ex.:
			ALTER TABLE clientes RENAME TO tbl_clientes;


	ALTER TABLE - CHANGE: alterar nome 
		Ex.:
			ALTER TABLE nome_da_tabela CHANGE nome_antigo nome_novo tipo_de_dados;



Inserir Dados::------------------------------------

	Inserir dados em tabela:

		INSERT INTO tabela (coluna1, coluna2, ...)
		VALUES (valor1, valor2, ...);




Consultas Simples::------------------------------------

	SELECT coluna FROM tabela;

		Ex.1: retorna os nomes dos autores da tabela autores.

			SELECT nome_autor FROM tbl_autores;
		

		Ex.2: mostra a tabela inteira.

			SELECT * FROM tbl_autores;


		Ex.3: especificando colunas.
			
			SELECT nome_livro, id_autor FROM tbl_livro;
			



Consulta com Ordenação::------------------------------------

	ORDER BY: ordena o conjunto-resultado de registros.

	ASC: crescente.
	DESC: descendente.

	Ex.: 
		SELECT * FROM tbl_livro
		ORDER BY nome_livro ASC;
		



Indexação::------------------------------------

	Usado para encontrar registros.

	Índicies automáticos:
		- Chave Primária
		- Chave Extrangeira
		- Constraint Unique

	Índice Clusterizado:
		- Altera fisicamente a ordem dos dados.

	Índice Não-Clusterizado:
		- Obejto separado é criado na tabela, apontando para as linhas da tabela original após a busca.
		- Baseia-se em valores-chave.
		- Uma tabela pode ter vários índices.

	
	Sintaxe: tabela ja existente.
	
		CREATE INDEX:

			CREATE [UNIQUE] INDEX nome_indice
			ON nome_tabela (
				coluna1 [ASC | DESC] --indexar de forma crescente ou decrescente (opcional)
			);


			OBS: UNIQUE é usado para indice que não permite repetição de dados.

		ALTER TABLE / ADD INDEX:
			ALTER TABLE nome_tabela ADD INDEX nome_indice (colunas);



	Mostrar indices de uma tabela:
		
		SHOW INDEX FROM tabela;

	Excluir indice:
		DROP INDEX nome_indice ON nome_tabela




Filtrar Registros em Consulta::------------------------------------

	Sintaxe: SELECT colunas FROM tabela WHERE coluna = valor;
		
	SELECT nome_livro, data_pub FROM tbl_livro
	WHERE id_autor = 1;


	Ex.: busca em tabelas diferentes e sufixo de string

		SELECT products.id, products.name
		FROM products
		JOIN categories ON products.id_categories = categories.id
		WHERE categories.name LIKE 'super%';

	Ex.: busca por data especifica

		SELECT customers.name, rentals.rentals_date
		FROM rentals
		JOIN customers ON rentals.id_customers = customers.id
		WHERE EXTRACT(YEAR FROM rentals.rentals_date) = 2016
		AND EXTRACT(MONTH FROM rentals.rentals_date) = 09;


Deletar Registros::------------------------------------

	DELETE FROM tabela WHERE coluna = valor;
		
		Ex.:
			DELETE FROM tbl_livros WHERE id_livro = 1;
			
			DELETE FROM tbl_livros WHERE id_livro IN (5, 6, 4);



	Excluir todos os registros de uma tabela:
		
		TRUNCATE TABLE nome_da_tabela;
	



Filtragem com Mais de uma Condição::------------------------------------

	AND, OR e NOT;

	Ex.: 
		SELECT * FROM tbl_livros
		WHERE id_livro > 2 AND id_autor < 3;
	
		SELECT * FROM tbl tbl_livros
		WHERE id_livro > 2 OR id_autor < 3;

		SELECT * FROM tbl_livros
		WHERE id_livro > 2 AND NOT id_autor < 3;
		



Filtragem com listas de valores::------------------------------------

	Sintaxe:
		SELECT coluna(s)
		FROM tabela(s)
		WHERE expressão ou valor IN/NOT IN (lista) 

	Ex.: 
		SELECT NomeeLivro, IdEditora
		FROM tbl_livro
		WHERE idEditora IN (2,4)		

	Ex.:
		SELECT NomeLivro, IdEditora
		FROM tbl_livro
		WHERE IdEditora IN (
			SELECT IdEditora
			FROM tbl_editora
			WHERE NomeEditora = 'Wiley' OR NomeEditora = 'Microsoft Press');
	

	Ex.:
		SELECT products.name, providers.name
		FROM products
		JOIN providers ON products.id_providers = providers.id
		WHERE products.id_categories = 6;




SQL Alias::------------------------------------

	Dar nome diferente a uma coluna ou tabela em uma consulta.

	SELECT colunas
	AS alias_coluna	
	FROM tabela AS alias_tabela;

	SELECT Nome_Livro
	AS Livro
	FROM tbl_Livro;




Funções de Agregação::------------------------------------

	Retornam um valor único baseado em um conjunto de valores.

	Sintaxe:
		função(ALL | DISTINCT expressão)
	
	Funções:
		MIN (valor mínimo)
		MAX (valor máximo)
		AVG (Média Aritmética)
		SUM (Total (soma))
		COUNT (contar quantidade de itens) 

	Ex.: 
		SELECT COUNT(*) FROM tbl_autores;

		SELECT COUNT(DISTINCT id_autor) FROM tbl_livro;

		SELECT  coluna_fixa_opcional, SUM(coluna1), SUM(coluna2) FROM nome_da_tabela;




Renomear Tabela::------------------------------------

	RENAME TABLE - TO

		Ex.:
			RENAME TABLE tabela1 TO tabela2;




Atualizar Registros::------------------------------------

	UPDATE tabela
	SET coluna = novo_valor_armazenado
	WHERE coluna = valor_filtro

	OBS: sem o WHERE todos os registros da coluna serão alterados.

	Ex.:
		UPDATE tbl_livros
		SET nome_livro = 'SSH, o shell seguro'
		WHERE id_livro = 2;



Agrupar Resultados pelo nome da Categoria::------------------------------------

	Geralmente usado junto com Funções Agregadas.

	GROUP BY
	
	Ex.:
		SELECT c.name AS name, SUM(p.amount) AS sum
		FROM products p
		JOIN categories c ON p.id_categories = c.id
		GROUP BY c.name;



Seleção de Intervalos::------------------------------------
	
	BETWEEN
	
	SELECT colunas FROM tabela
	WHERE coluna BETWEEN valor1 AND valor2;

